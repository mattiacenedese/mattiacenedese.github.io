import plotly.graph_objects as go
import plotly.express as px
import numpy as np


colors = ['#FA8CFF','#D241C8','#D241C8','#9B14B4','#9B14B4']

fig = go.Figure()

activities_col = 'Activity'
categories_col = 'Category'

dimensions_col = 'Dimension'

num_lines = len(categories)
num_radii = len(dimensions)

radii = [3, 4.5, 6, 7.5, 9]#np.linspace(2,max_radius,num_radii)
max_radius = np.max(radii)
line_lenght = max_radius+2
thetas = np.linspace(0,2*np.pi,101)
angle, spacing_texth, spacing_textv = np.pi/2, 0.4, -0.5

spacing_textvs = [-0.5, -0.3]

fill_style = 'toself'
for radius, count in zip(radii,range(len(radii))):#zip(radii[::-1],range(len(radii)-1,-1,-1)):
  if count > 0:
    fill_style = 'tonext'
  fig.add_trace(
      go.Scatter(
          x = radius*np.cos(thetas),
          y = radius*np.sin(thetas),
          mode='lines',
          line_color=colors[count],
          #fill=fill_style,
          showlegend = False,
          hoverinfo='skip'
      )
  )
  if count==0:
    spacing_textv = spacing_textvs[0]
  else:
    spacing_textv = spacing_textvs[1]
  fig.add_annotation(
      text=dimensions[count],#'<b>' + dimensions[count] + '</b>',
      x=spacing_texth*radii[0],
      y=radius*np.sin(angle)+spacing_textv*radii[0],
      showarrow=False
  )
  print(radius)
  print(dimensions[count])

for iline in range(num_lines):
  fig.add_trace(
      go.Scatter(
          x = [0, line_lenght*np.sin(2*np.pi/num_lines*iline)],
          y = [0, line_lenght*np.cos(2*np.pi/num_lines*iline)],
          mode='lines',
          line_color='#000000',#'#FFFFFF',
          showlegend = False,
          hoverinfo='skip'
      )
  )
  angle = 2*np.pi/num_lines*(iline+0.5)
  fig.add_annotation(
      text=categories[iline],
      x=line_lenght*np.sin(angle),
      y=line_lenght*np.cos(angle),
      showarrow=False,
      xanchor='center', yanchor='middle'
  )


index = pd.MultiIndex.from_product(
    [categories, dimensions], names = [categories_col, dimensions_col]
)

df_loc = pd.DataFrame(index = index).reset_index()
angle_tol = 2*np.pi/num_lines*0.1
for count in range(len(categories)):
  df_loc.loc[
      df_loc[categories_col]==categories[count],
      'min_angle'
  ] = 2*np.pi/num_lines*count + angle_tol
  df_loc.loc[
      df_loc[categories_col]==categories[count],
      'max_angle'
  ] = 2*np.pi/num_lines*(count+1) - angle_tol

radii_ext = np.array([1])
radii_ext = np.append(radii_ext,radii)

radius_tol = 0.2
for count in range(len(dimensions)):
  df_loc.loc[
      df_loc[dimensions_col]==dimensions[count],
      'min_radius'
  ] = radii_ext[count] + radius_tol
  df_loc.loc[
      df_loc[dimensions_col]==dimensions[count],
      'max_radius'
  ] = radii_ext[count+1] - radius_tol

dimensions = [
    'Observe',
    'Monitor',
    'Explore',
    'Absorb',
    'Develop'
]
colors_dim = colors #['#3C4150','#418CE1','#9B14B4','#1455B4','#006E73']

for category in categories:
  for dimension, color in zip(dimensions,colors_dim):
    df_loc_sel = (
        df_loc[categories_col]==category
        ) & (
        df_loc[dimensions_col]==dimension)
    text_coord = df.loc[(
        df[categories_col]==category
        ) & (
        df[dimensions_col]==dimension),activities_col].to_list()
    radii_coord = np.random.uniform(
        low=df_loc.loc[df_loc_sel,'min_radius'],
        high=df_loc.loc[df_loc_sel,'max_radius'],
        size=len(text_coord)
    )
    thetas_coord = np.random.uniform(
        low=df_loc.loc[df_loc_sel,'min_angle'],
        high=df_loc.loc[df_loc_sel,'max_angle'],
        size=len(text_coord)
    )
    x_coord = radii_coord*np.sin(thetas_coord)
    y_coord = radii_coord*np.cos(thetas_coord)
    name = None #categories_col + ': ' + category + ', ' + dimensions_col + ': ' + str(dimension)
    fig.add_trace(
        go.Scatter(
            x = x_coord,
            y = y_coord,
            text = text_coord,
            mode = 'markers',#marker_color = color,#'#000000',
            marker=dict(
                size=8,
                color = color,
                line=dict(
                    width=2,
                    color='#000000'
                )
            ),
            showlegend = False,
            hovertemplate = '%{text}',
            name = name,
            hoverlabel = dict(namelength = 0)
        )
    )

fig.update_xaxes(
    range=[-line_lenght,line_lenght],
    #showgrid=False,
    #zeroline=False,
    #visible=False,
)

fig.update_yaxes(
    scaleanchor="x",
    scaleratio=1,
    range=[-line_lenght,line_lenght],
    #showgrid=False,
    #zeroline=False,
    #visible=False,
)

fig.update_layout(
    height=800,
    width=800,
    font_family="Helvetica",
    font_size=14,
    #plot_bgcolor = 'white'
)

fig.show()
fig.write_html("radar_plot.html")
